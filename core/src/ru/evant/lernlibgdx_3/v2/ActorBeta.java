package ru.evant.lernlibgdx_3.v2;

//	Самообразование #3
//	Java Game Development with LibGDX, 2nd Edition

/*
 * Расширяет класс Actor, включив в него графику и обнаружение столкновений(overlaps).
 * Класс Actor хранит такие данные, как положение(position) и поворот(rotation).
 */

/*
•	Вместо использования текстуры(Texture) вы используете область текстур(TextureRegion) для хранения изображения,
        что обеспечит большую гибкость при рендеринге изображения. Основное различие между этими классами заключается в том,
        что TextureRegion может использоваться для хранения текстуры, содержащей несколько изображений или кадров анимации,
        а TextureRegion также хранит координаты, называемые координатами (u,v), которые определяют, какая прямоугольная область
        текстуры должна использоваться.
•	В конструкторе класса ActorBeta оператор super() активирует конструктор суперкласса (Actor), который инициализирует
        структуры данных, используемые этим классом.
•	В методе setTexture также необходимо задать размеры актера и прямоугольника (на основе ширины и высоты текстуры),
        чтобы методы рисования(draw) и перекрытия(overlaps) работали правильно.
•	В методе перекрытия ключевое слово this используется для указания экземпляра объекта, вызывающего метод. В этом случае
        он используется для ясности (чтобы отличить его от экземпляра с именем other, который является параметром для метода);
        использование этого не является строго необходимым и при желании может быть опущено
•	Методы act и draw начинаются с вызова соответствующего метода суперкласса (super.act и super.draw), чтобы их функциональность
        не была потеряна, даже если методы переопределены в этом классе.
•	В методе рисования, если цвет был установлен (с помощью метода setColor), он может использоваться для оттенка изображения при
        его визуализации и должен быть передан пакетному объекту, который обрабатывает фактическую визуализацию. (По умолчанию используется
        белый цвет, который не влияет на изображение.) Кроме того, объект пакетной обработки(Batch) может использовать данные, хранящиеся
        в объекте актер(Actor) (такие как положение(position), поворот(rotate) и коэффициенты масштабирования(scaling factors)) при
        визуализации изображения, хотя большая часть этой функциональности не используется в этом проекте.
•	Иногда вам захочется написать еще более специализированные расширения этих классов. Для этого проекта черепаха требует еще
        большей функциональности, чем то, что предоставляется классом ActorBeta. В частности, черепаха должна двигаться в зависимости от
        того, какая из клавиш со стрелками в данный момент нажата. В интересах надлежащей практики объектно-ориентированного проектирования
        (в частности, инкапсуляции) соответствующий код из метода обновления класса StarfishCollectorAlpha будет перенесен в метод act нового
        класса Turtle. Кроме того, обратите внимание на использование метода moveBy (унаследовано от класса Actor), который регулирует положение
        черепахи таким же образом, как и раньше, в терминах координат x и y.
 */

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.scenes.scene2d.Actor;

public class ActorBeta extends Actor {

    private TextureRegion textureRegion; // объявить регион текстур
    private Rectangle rectangle; // объявить прямоугольник

    // конструктор
    public ActorBeta() {
        super(); // активировать конструктор суперкласса Actor
        textureRegion = new TextureRegion(); // создать регион текстур
        rectangle = new Rectangle(); // создать прямоугольник
    }

    // установить текстуру
    public void setTexture(Texture t) {
        textureRegion.setRegion(t); // установить текстуру в регион текстур
        setSize(t.getWidth(), t.getHeight()); // установить размер
        rectangle.setSize(t.getWidth(), t.getHeight()); // установить размер прямоугольника
    }

    // получить прямоугольник
    public Rectangle getRectangle() {
        rectangle.setPosition(getX(), getY()); // установить координаты отрисовки
        return rectangle; // вернуть прямоугольник
    }

    // проверить сталкновение
    public boolean overlaps(ActorBeta other) {
        return this.getRectangle().overlaps(other.getRectangle()); // вернуть true или false (столновение произошло или нет)
    }

    // активность
    public void act(float dt) {
        super.act(dt); // вызвать метод act из суперкласса
    }

    // нарисовать
    public void draw(Batch batch, float parentAlpha) {
        super.draw(batch, parentAlpha); // вызвать метод act из суперкласса
        Color c = getColor();  // используется для нанесения цветового эффекта оттенка
        batch.setColor(c.r, c.g, c.b, c.a); // установить цвет

        // если объект видимый, то нарисовать его
        if (isVisible())
            batch.draw(textureRegion, getX(), getY(), getOriginX(), getOriginY(),
                    getWidth(), getHeight(), getScaleX(), getScaleY(), getRotation());
    }
}
